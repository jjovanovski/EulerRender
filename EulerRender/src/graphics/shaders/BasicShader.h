#pragma once

const char* BASIC_SHADER_VERTEX = "#version 330 core\n"
""
"layout (location = 0) in vec3 in_pos;"
"layout (location = 1) in vec3 in_normal;"
"layout (location = 2) in vec2 in_uv;"
""
"uniform mat4 proj, view, model;"
""
"out vec3 fragmentPos;"
"out vec3 fragmentNormal;"
"out vec2 uvPos;"
""
"void main() {"
"	vec4 positionInWorld = model * vec4(in_pos, 1.0);"
"	gl_Position = proj * view * positionInWorld;"
"	"
"	fragmentPos = vec3(positionInWorld);"
"	fragmentNormal = mat3(transpose(inverse(model))) * in_normal;"
"	uvPos = in_uv;"
"}";


const char* BASIC_SHADER_FRAGMENT = "#version 330 core\n"
""
"in vec3 fragmentPos;"
"in vec3 fragmentNormal;"
"in vec2 uvPos;"
""
"uniform vec3 objectColor;"
""
"uniform vec3 ambientColor;"
"uniform float ambientIntensity;"
""
"uniform vec3 lightPos;"
"uniform vec3 lightColor;"
"uniform float lightIntensity;"
""
"uniform vec3 cameraPos;"
""
"uniform sampler2D texture0;"
"uniform float useTexture;"
""
"out vec4 fragColor;"
""
"void main() {"
"	vec3 ambient = ambientColor * ambientIntensity;"
"	"
"	vec3 fragmentNormalUnit = normalize(fragmentNormal);"
"	vec3 lightDirection = normalize(lightPos - fragmentPos);"
"	vec3 cameraDirection = normalize(cameraPos - fragmentPos);"
"	"
"	float diffuseIntensity = max(dot(lightDirection, fragmentNormalUnit), 0);"
"	vec3 diffuse = lightColor * diffuseIntensity;"
"	"
"	vec3 reflectDirection = normalize(reflect(lightDirection, fragmentNormalUnit));"
"	float specularIntensity = pow(max(dot(reflectDirection, cameraDirection), 0.0), 128);"
"	vec3 specular = lightColor * 0.1 * specularIntensity;"
"	"
"	vec4 textureColor = vec4(1.0);"
"	if(useTexture > 0) textureColor = texture(texture0, uvPos);"
"	"
"	fragColor = vec4((ambient + diffuse + specular) * objectColor, 1.0) * textureColor;"
"}";